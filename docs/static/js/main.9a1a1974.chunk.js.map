{"version":3,"sources":["App.tsx","index.tsx"],"names":["service","axios","create","withCredentials","headers","isWebview","navigator","userAgent","toLowerCase","includes","App","React","useState","text","setText","data","setData","apiData","setApiData","csrf","setCsrf","iframUrl","setIframeUrl","iframeRef","useRef","useEffect","post","then","response","console","log","encodeURI","get","encodeURIComponent","getData","current","window","testInit","input","JSON","parse","e","src","document","location","href","stringify","title","ref","width","height","style","visibility","ReactDOM","render","StrictMode","getElementById"],"mappings":"sPAGMA,EAAUC,IAAMC,OAAO,CAC3BC,iBAAiB,EACjBC,QAAS,CAEP,OAAU,WACV,gBAAiB,cAcfC,EAAaC,UAAUC,WAAaD,UAAUC,UAAUC,cAAcC,SAAS,WA0EtEC,MAjEf,WACE,MAAwBC,IAAMC,SAAS,IAAvC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBH,IAAMC,SAAS,IAAvC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA8BL,IAAMC,SAAS,IAA7C,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwBP,IAAMC,WAA9B,mBAAOO,EAAP,KAAaC,EAAb,KACA,EAAiCT,IAAMC,WAAvC,mBAAOS,EAAP,KAAiBC,EAAjB,KACMC,EAAYZ,IAAMa,OAA0B,MAsClD,OAnCAb,IAAMc,WAAU,WA5BTzB,EAAQ0B,KAAR,8CA6BQC,MAAK,SAAAC,GAChBC,QAAQC,IAAIF,GACRA,GAAYA,EAASb,MAAQa,EAASb,KAAKI,MAC7CC,EAAQQ,EAASb,KAAKI,SAGtBd,GACFiB,EAAa,+BAAiCS,UAAU,SAEzD,CAAC1B,IACJM,IAAMc,WAAU,WACVN,GArCe,SAACA,GACtB,OAAOnB,EAAQgC,IAAR,+DAAoEC,mBAAmB,MAC9F,CACE7B,QAAS,CAAE,cAAiBe,KAkClBe,CAAQf,GAAMQ,MAAK,SAAAC,GACvBA,GAAYA,EAASb,MAAQa,EAASb,MACxCG,EAAWU,EAASb,WAGvB,CAACI,IAEJR,IAAMc,WAAU,WACVJ,GAAYE,EAAUY,UACxBC,OAAOC,SAAW,SAAUC,GAC1BxB,EAAQwB,GACR,IACEtB,EAAQuB,KAAKC,MAAMF,IACnB,MAAOG,GACPZ,QAAQC,IAAIW,GAEd,MAAO,QAETlB,EAAUY,QAAQO,IAAMrB,KAEzB,CAACA,IAIF,qCACE,gCAAK,yCAAL,KAA4BsB,SAASC,SAASC,QAC9C,gCAAK,+CAAL,KAAkCxC,EAAY,OAAS,WACvD,gCAAK,+CAAL,KAAkCC,UAAUC,aAC5C,gCAAK,sDAAL,KAAyCM,KACzC,gCAAK,kDAAL,KAAqC0B,KAAKO,UAAU/B,MACpD,gCAAK,mDAAL,KAAsCwB,KAAKO,UAAU7B,MAEnDZ,GACA,wBACE0C,MAAM,UACNC,IAAKzB,EACL0B,MAAM,OAAOC,OAAO,QAAQR,IAAI,GAChCS,MAAO,CAAEC,WAAY,gBCpF/BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFZ,SAASa,eAAe,W","file":"static/js/main.9a1a1974.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from \"axios\"\nconst service = axios.create({\n  withCredentials: true,\n  headers: {\n    //REQUEST_METHOD: \"GET\",\n    \"Pragma\": \"no-cache\",\n    \"Cache-Control\": \"no-cache\",\n  }\n})\nexport const checktoken = () => {\n  return service.post(`https://www.masstracing.com/api/checktoken`)\n}\n\nexport const getData = (csrf: string) => {\n  return service.get(`https://www.masstracing.com/api/location/company/1/5/${encodeURIComponent(\"@\")}`, \n  {\n    headers: { \"Authorization\": csrf }\n  })\n}\n\nconst isWebview = (navigator.userAgent && navigator.userAgent.toLowerCase().includes('webview'))\n\ndeclare global {\n  interface Window {\n    testInit: Function\n    isReady: boolean\n  }\n}\n\nfunction App() {\n  const [text, setText] = React.useState('')\n  const [data, setData] = React.useState({})\n  const [apiData, setApiData] = React.useState({})\n  const [csrf, setCsrf] = React.useState()\n  const [iframUrl, setIframeUrl] = React.useState<string | undefined>()\n  const iframeRef = React.useRef<HTMLIFrameElement>(null)\n\n\n  React.useEffect(() => {\n    checktoken().then(response => {\n      console.log(response)\n      if (response && response.data && response.data.csrf) {\n        setCsrf(response.data.csrf)\n      }\n    })\n    if (isWebview) {\n      setIframeUrl('abc://window.testInit?query=' + encodeURI('{}'))\n    }\n  }, [isWebview])\n  React.useEffect(() => {\n    if (csrf) getData(csrf).then(response => {\n      if (response && response.data && response.data) {\n        setApiData(response.data)\n      }\n    })\n  }, [csrf])\n\n  React.useEffect(() => {\n    if (iframUrl && iframeRef.current) {\n      window.testInit = function (input: string) {\n        setText(input)\n        try {\n          setData(JSON.parse(input))\n        } catch (e) {\n          console.log(e)\n        }\n        return 'good'\n      }\n      iframeRef.current.src = iframUrl\n    }\n  }, [iframUrl])\n\n\n  return (\n    <>\n      <div><strong>URL</strong>: {document.location.href}</div>\n      <div><strong>isWebview</strong>: {isWebview ? 'true' : 'false'}</div>\n      <div><strong>UserAgent</strong>: {navigator.userAgent}</div>\n      <div><strong>text from Native</strong>: {text}</div>\n      <div><strong>data in JSON</strong>: {JSON.stringify(data)}</div>\n      <div><strong>data From API</strong>: {JSON.stringify(apiData)}</div>\n      {\n        isWebview &&\n        <iframe\n          title=\"webview\"\n          ref={iframeRef}\n          width='100%' height='100vh' src=''\n          style={{ visibility: 'hidden' }}\n        />\n      }\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}