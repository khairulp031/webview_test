{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["isWebview","navigator","userAgent","toLowerCase","includes","App","React","useState","text","setText","data","setData","iframUrl","setIframeUrl","iframeRef","useRef","useEffect","encodeURI","current","window","testInit","input","JSON","parse","e","console","log","src","document","location","href","stringify","title","ref","width","height","style","visibility","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8MAGMA,EAAaC,UAAUC,WAAaD,UAAUC,UAAUC,cAAcC,SAAS,WAyDtEC,MAjDf,WACE,MAAwBC,IAAMC,SAAS,IAAvC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBH,IAAMC,SAAS,IAAvC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAiCL,IAAMC,WAAvC,mBAAOK,EAAP,KAAiBC,EAAjB,KACMC,EAAYR,IAAMS,OAA0B,MAyBlD,OAtBAT,IAAMU,WAAU,WACVhB,GACFa,EAAa,+BAAiCI,UAAU,SAEzD,IAEHX,IAAMU,WAAU,WACVJ,GAAYE,EAAUI,UACxBC,OAAOC,SAAW,SAAUC,GAC1BZ,EAAQY,GACR,IACEV,EAAQW,KAAKC,MAAMF,IACnB,MAAOG,GACPC,QAAQC,IAAIF,GAEd,MAAO,QAETV,EAAUI,QAAQS,IAAMf,KAEzB,CAACA,IAIF,qCACE,gCAAK,yCAAL,KAA4BgB,SAASC,SAASC,QAC9C,gCAAK,+CAAL,KAAkC9B,EAAY,OAAS,WACvD,gCAAK,+CAAL,KAAkCC,UAAUC,aAC5C,gCAAK,sDAAL,KAAyCM,KACzC,gCAAK,kDAAL,KAAqCc,KAAKS,UAAUrB,MAElDV,GACA,wBACEgC,MAAM,UACNC,IAAKnB,EACLoB,MAAM,OAAOC,OAAO,QAAQR,IAAI,GAChCS,MAAO,CAAEC,WAAY,gBCvChBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrB,SAASsB,eAAe,SAM1BZ,K","file":"static/js/main.56118293.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst isWebview = (navigator.userAgent && navigator.userAgent.toLowerCase().includes('webview'))\n\ndeclare global {\n  interface Window {\n    testInit: Function\n  }\n}\n\nfunction App() {\n  const [text, setText] = React.useState('')\n  const [data, setData] = React.useState({})\n  const [iframUrl, setIframeUrl] = React.useState<string | undefined>()\n  const iframeRef = React.useRef<HTMLIFrameElement>(null)\n\n\n  React.useEffect(() => {\n    if (isWebview) {\n      setIframeUrl('abc://window.testInit?query=' + encodeURI('{}'))\n    }\n  }, [])\n\n  React.useEffect(() => {\n    if (iframUrl && iframeRef.current) {\n      window.testInit = function (input: string) {\n        setText(input)\n        try {\n          setData(JSON.parse(input))\n        } catch (e) {\n          console.log(e)\n        }\n        return 'good'\n      }\n      iframeRef.current.src = iframUrl\n    }\n  }, [iframUrl])\n\n\n  return (\n    <>\n      <div><strong>URL</strong>: {document.location.href}</div>\n      <div><strong>isWebview</strong>: {isWebview ? 'true' : 'false'}</div>\n      <div><strong>UserAgent</strong>: {navigator.userAgent}</div>\n      <div><strong>text from Native</strong>: {text}</div>\n      <div><strong>data in JSON</strong>: {JSON.stringify(data)}</div>\n      {\n        isWebview &&\n        <iframe\n          title=\"webview\"\n          ref={iframeRef}\n          width='100%' height='100vh' src=''\n          style={{ visibility: 'hidden' }}\n        />\n      }\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}